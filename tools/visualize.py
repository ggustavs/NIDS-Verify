import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import argparse

def load_data(file_path):
    """Load the extracted features CSV file."""
    try:
        df = pd.read_csv(file_path)
        print(f"Loaded data from {file_path} with {df.shape[0]} rows and {df.shape[1]} columns.")
        return df
    except Exception as e:
        raise RuntimeError(f"Failed to load data from {file_path}: {e}") from e

def plot_label_distribution(df):
    """Plot the distribution of labels."""
    if "Label" not in df.columns:
        print("The 'Label' column is missing in the dataset.")
        return
    label_counts = df["Label"].value_counts()
    plt.figure(figsize=(8, 6))
    sns.barplot(x=label_counts.index, y=label_counts.values, palette="viridis")
    plt.title("Label Distribution")
    plt.xlabel("Label (0 = Benign, 1 = Malicious)")
    plt.ylabel("Count")
    plt.xticks([0, 1], ["Benign", "Malicious"])
    for container in plt.gca().containers:
        plt.bar_label(container, label_type="edge", fontsize=12)
    plt.savefig("label_distribution.png")  # Save the plot as a PNG file
    print("Label distribution plot saved as 'label_distribution.png'.")

def plot_feature_histogram(df, feature):
    """Plot a histogram for a specific feature."""
    if feature not in df.columns:
        print(f"The feature '{feature}' is not in the dataset.")
        return
    plt.figure(figsize=(8, 6))
    sns.histplot(df[feature], kde=True, bins=30, color="blue")
    plt.title(f"Histogram of {feature}")
    plt.xlabel(feature)
    plt.ylabel("Frequency")
    plt.savefig(f"{feature}_histogram.png")  # Save the plot as a PNG file
    print(f"Histogram for feature '{feature}' saved as '{feature}_histogram.png'.")

def plot_feature_scatter(df, feature_x, feature_y):
    """Plot a scatter plot for two features."""
    if feature_x not in df.columns or feature_y not in df.columns:
        print(f"One or both features '{feature_x}' and '{feature_y}' are not in the dataset.")
        return
    plt.figure(figsize=(8, 6))
    sns.scatterplot(data=df, x=feature_x, y=feature_y, hue="Label", palette="viridis", alpha=0.7)
    plt.title(f"Scatter Plot of {feature_x} vs {feature_y}")
    plt.xlabel(feature_x)
    plt.ylabel(feature_y)
    plt.legend(title="Label", labels=["Benign", "Malicious"])
    plt.savefig(f"{feature_x}_vs_{feature_y}_scatter.png")  # Save the plot as a PNG file
    print(f"Scatter plot for '{feature_x}' vs '{feature_y}' saved as '{feature_x}_vs_{feature_y}_scatter.png'.")

def plot_correlation_matrix(df):
    """Plot a correlation matrix for numeric features."""
    numeric_df = df.select_dtypes(include=["float64", "int64"])
    if numeric_df.empty:
        print("No numeric features found in the dataset.")
        return
    plt.figure(figsize=(12, 10))
    corr_matrix = numeric_df.corr()
    sns.heatmap(corr_matrix, annot=False, cmap="coolwarm", fmt=".2f")
    plt.title("Correlation Matrix")
    plt.savefig("correlation_matrix.png")  # Save the plot as a PNG file
    print("Correlation matrix plot saved as 'correlation_matrix.png'.")

def main():
    parser = argparse.ArgumentParser(description="Visualize extracted features from PCAP data.")
    parser.add_argument("file", help="Path to the CSV file generated by extract_features.py")
    parser.add_argument("--hist", help="Feature to plot a histogram for", default=None)
    parser.add_argument("--scatter", nargs=2, help="Two features to plot a scatter plot for", default=None)
    parser.add_argument("--correlation", action="store_true", help="Plot the correlation matrix")
    args = parser.parse_args()

    # Load the data
    df = load_data(args.file)

    # Plot label distribution
    plot_label_distribution(df)

    # Plot histogram for a specific feature
    if args.hist:
        plot_feature_histogram(df, args.hist)

    # Plot scatter plot for two features
    if args.scatter:
        plot_feature_scatter(df, args.scatter[0], args.scatter[1])

    # Plot correlation matrix
    if args.correlation:
        plot_correlation_matrix(df)

if __name__ == "__main__":
    main()