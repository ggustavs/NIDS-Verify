[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "nids-verify-personal"
version = "0.1.0"
description = "Network Intrusion Detection System with Adversarial Training"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "mlflow>=2.8.0",
    "onnx>=1.14.0",
    "psutil>=5.9.0",
    "tqdm>=4.67.1",
    "scapy>=2.6.1",
    "torch>=2.2.0",
    "property-driven-ml==0.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.5.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

[project.scripts]
nids-train = "src.main:main"
nids-preprocess = "src.preprocess_cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
]

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    ".venv",
    "data",
    "models",
    "logs",
    "mlruns",
    "vehicle",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (research code can be complex)
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["S101"]  # Allow assert statements in tests
"nb/**/*.py" = ["E402", "F401", "B018"]  # More lenient for notebooks

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.bandit]
exclude_dirs = ["tests", "nb", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True warnings

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
fail-under = 50
exclude = ["tests", "nb", "scripts"]
verbose = 0
